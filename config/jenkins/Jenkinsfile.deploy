pipeline {
    agent any

    parameters {
        string(name: 'VM_USER', defaultValue: 'azureuser_webhooks', description: 'Usuario SSH de la VM en Azure')
        string(name: 'VM_IP', defaultValue: '20.64.146.117', description: 'IP p√∫blica de la VM en Azure')
        string(name: 'TAG', defaultValue: 'latest', description: 'Tag a descargar')
        string(name: 'NAME_APP', defaultValue: 'webhook_api_artifact', description: 'Nombre de la aplicaci√≥n')
    }

    stages {
        stage('Deploy Full Flow') {
            steps {
                sshagent(['azure_vm_key']) {
                    withCredentials([
                        string(credentialsId: 'docker-user', variable: 'DOCKER_USER'),
                        string(credentialsId: 'docker-webhook', variable: 'DOCKER_PASS')
                    ]) {
                        sh """
                            cat <<'ENDSSH' | ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} 'bash -s'
                            
                            set -euo pipefail

                            echo "üîë Conectado a \$(hostname)"


                            if ! command -v docker >/dev/null 2>&1; then
                                echo "‚öô Instalando Docker..."
                                sudo apt-get update -y
                                sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                                sudo install -m 0755 -d /etc/apt/keyrings
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
                                sudo chmod a+r /etc/apt/keyrings/docker.asc
                                echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \${UBUNTU_CODENAME:-\$VERSION_CODENAME}) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                                sudo apt-get update -y
                                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                            fi
                            

                            echo "‚úî Docker instalado: \$(docker --version)"

                            echo "üîê Logueando en Docker Hub..."

                            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

                            echo "üöÄ Desplegando ${NAME_APP}:${TAG}..."

                            docker pull ${DOCKER_USER}/${NAME_APP}:${TAG}

                            if [ \$(docker ps -a -q -f name=${NAME_APP}) ]; then
                                echo "üõë Deteniendo y eliminando contenedor existente..."
                                docker stop ${NAME_APP} || true
                                docker rm ${NAME_APP} || true
                            fi

                            docker run -d --name ${NAME_APP} -p 80:3000 ${DOCKER_USER}/${NAME_APP}:${TAG}
                            echo "‚úÖ Despliegue finalizado"

                            ENDSSH
                        """
                    }
                }
            }
        }

        stage('Validate Deployment') {
            steps {
                sshagent(['azure_vm_key']) {
                    script {
                        sh(
                            script: """
                                ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} "
                                    echo 'üîç Validando despliegue de ${NAME_APP}...'
                                    if docker ps --filter 'name=${NAME_APP}' --filter 'status=running' | grep ${NAME_APP}; then
                                        echo '‚úÖ Contenedor ${NAME_APP} est√° corriendo correctamente'
                                    else
                                        echo '‚ö†Ô∏è El contenedor ${NAME_APP} no est√° corriendo. Mostrando logs...'
                                        docker logs ${NAME_APP} || echo '‚ùå No se encontraron logs del contenedor'
                                        exit 1
                                    fi
                                "
                            """,
                            returnStdout: true
                        )
                    }
                }
            }
        }
    }
}



// pipeline {
//     agent any

//     triggers {
//         githubPush()
//     }

//     stages {

// 		stage('Check & Install Docker') {
// 			steps {
// 				withCredentials([sshUserPrivateKey(credentialsId: 'azure_vm_key', keyFileVariable: 'SSH_KEY')]) {
// 					sh '''
// 						ssh -i $SSH_KEY -o StrictHostKeyChecking=no azureuser@MI_IP_AZURE "
// 							if command -v docker >/dev/null 2>&1; then
// 								echo 'Docker est√° instalado:'
// 								docker --version
// 							else

// 								apt-get install -y apt-transport-https ca-certificates curl 
								
// 								software-properties-common

// 								sudo apt-get -y update

// 								sudo install -m 0755 -d /etc/apt/keyrings

// 								sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

// 								sudo chmod a+r /etc/apt/keyrings/docker.asc

// 								echo \
// 								 	"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
// 								 	$(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
// 								 	sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

// 								sudo apt-get update

// 								sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

// 								docker --version
// 							fi
// 						"
// 					'''
// 				}
// 			}
// 		}
		
// 		stage('Init') {
//             steps {
//                 withCredentials([sshUserPrivateKey(credentialsId: 'azure_vm_key', keyFileVariable: 'SSH_KEY')]) {
//                     sh '''
//                         ssh -i $SSH_KEY -o StrictHostKeyChecking=no azureuser_webhooks@20.64.146.117 "
// 							mkdir -p /var/www/express-webhook &&
//                             cd /var/www/express-webhook &&
//                             git pull 
//                         "
//                     '''
//                 }
//             }
//         }

//     }
// }
